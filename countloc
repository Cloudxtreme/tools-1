#!/usr/bin/env python

"""countloc

Given a search pattern, compute the number of Lines of Code
for each file found.
"""

import os
import sys
import os.path
import optparse

from numpy import min, max, mean, std

from pymills.utils import getFiles

__version__ = "0.1"
__copyright__ = "CopyRight (C) 2008 by James Mills"
__author__ = "James Mills <prologic@shortcircuit.net.au>"
__url__ = "http://prologic.shortcircuit.net.au/"

USAGE = "%prog [options] <pattern>"
VERSION = "%prog v" + __version__

def parse_options():
	"""parse_options() -> opts, args

	Parse and command-line options given returning both
	the parsed options and arguments.
	"""

	parser = optparse.OptionParser(usage=USAGE, version=VERSION)

	parser.add_option("-v", "--verbose",
			action="store_true", default=False, dest="verbose",
			help="Verbose output during operation.")
	parser.add_option("-p", "--path",
			action="store", default=".", dest="path",
			help="Set path to search.")
	parser.add_option("-t", "--total",
			action="store_true", default=False, dest="total",
			help="Display total Lines of Code only.")
	parser.add_option("-s", "--stats",
			action="store_true", default=False, dest="stats",
			help="Display file statistics and total Lines of Code.")
	parser.add_option("-r", "--recursive",
			action="store_true", default=False, dest="recursive",
			help="Recursive mode")

	opts, args = parser.parse_args()
	if len(args) < 1:
		parser.print_help()
		raise SystemExit, 1

	return opts, args

def getLOC(file):
	return len(open(file, "r").readlines())

def main():
	opts, args = parse_options()

	cwd = os.getcwd()
	path = opts.path
	pattern = args[0]

	if path == ".":
		path = os.getcwd()
	
	files = getFiles(path, pattern, recursive=opts.recursive, full=True)

	total = 0
	locs = []
	for file in files:
		loc = getLOC(file)
		total += loc
		locs.append(loc)
		if opts.verbose:
			filename = file.replace(cwd, ".")
			print "%s: %d" % (filename, loc)
	
	if opts.verbose:
		print
	
	if opts.total:
		print "Files:    %d" % len(locs)
		print "Total:    %d" % total

	if opts.stats:
		print "Min:      %d" % int(min(locs))
		print "Mean:     %d" % int(mean(locs))
		print "Max;      %d" % int(max(locs))
		print "Std Dev.: %d" % int(std(locs))

if __name__ == "__main__":
	main()
