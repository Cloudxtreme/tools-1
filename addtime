#!/usr/bin/env python
# Filename: addtime
# Module:	addtime
# Date:		19th August 2005
# Author:	James Mills <prologic@shortcircuit.net.au>

"""addtime

Program to help add up times (eg: log books)
"""

__desc__ = "Time Adder"
__version__ = "0.2.2"
__author__ = "James Mills"
__email__ = "%s, prologic at shortcircuit dot net dot au" % __author__
__url__ = "http://shortcircuit.net.au/~prologic/"
__copyright__ = "CopyRight (C) 2005 by %s" % __author__
__license__ = "GPL"

import os
import sys
import string
import optparse
from itertools import izip, cycle

from pymills.utils import isReadable

ERRORS = [
(1, "No start/end time given, no file given either!"),
(2, "No %s time given"),
(3, "Cannot read file '%s'")]

def hmsToSeconds(h, m, s=0):
	return h*3600 + m*60 + s

def getTotalTime(s, e):
	if e < s:
		return ((60*60*24) + e) - s
	else:
		return e - s

SYNTAXES = [
"([0-9]+):([0-9]+)(:([0-9]+))?",
"([0-9]{2})([0-9]{2})(([0-9]{2}))?"]

def main():

	parser = optparse.OptionParser(
			usage="%prog [options]",
			version="%prog " + __version__)

	parser.add_option("-s", "--start",
			action="store", default=None, dest="start",
			help="Specify start time (hms, h:m:s")

	parser.add_option("-e", "--end",
			action="store", default=None, dest="end",
			help="Specify end time (hms, h:m:s")

	parser.add_option("-v", "--verbose",
			action="store_true", default=False, dest="verbose",
			help="Verbose mode")

	opts, args = parser.parse_args()

	if opts.start is None and opts.end is None and not args:
		parser.print_help()
		parser.exit(ERRORS[0])

	elif args and args[0] == "-":

		if opts.start is None:
			parser.exit(ERRORS[1] % "start")
		elif opts.end is None:
			parser.exit(ERRORS[1] % "end")
		else:

			start = opts.start
			end = opts.end

			start = hmsToSeconds(int(start[:2]), int(start[2:]))
			end = hmsToSeconds(int(end[:2]), int(end[2:]))

			totalTime = getTotalTime(start, end) / 60

			if opts.verbose:
				print "Total Time: %s mins" % totalTime
			else:
				print totalTime
	
	else:

		totalTime = 0

		for file in args:
			fd = open(file, "r")

			lines = list(line for line in fd)
			starts = (x.strip().split(":")[1].strip() for x in lines if x and x.startswith("StartTime"))
			ends = (x.strip().split(":")[1].strip() for x in lines if x and x.startswith("EndTime"))
			times = izip(starts, ends)
			for start, end in times:
				start = hmsToSeconds(int(start[:2]), int(start[2:]))
				end = hmsToSeconds(int(end[:2]), int(end[2:]))
				totalTime += getTotalTime(start, end) / 60

		if opts.verbose:
			print "Total Time: %s mins" % totalTime
		else:
			print totalTime

if __name__ == "__main__":
	main()
