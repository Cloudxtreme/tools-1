#!/usr/bin/env python

# Module:	bhimport
# Date:		17th September 2008
# Author:	James Mills, prologic at shortcircuit dot net dot au

"""bhimport

Tool to read and parse CSV files and import the data
into a buzhug database.

Usage:
	bhimport <file> <path>

<file> - CSV Input file
<path> - Path to buzhug database
"""

__desc__ = "Buzhug Importer"
__version__ = "0.2"
__author__ = "James Mills"
__email__ = "%s, prologic at shortcircuit dot net dot au" % __author__
__url__ = "http://shortcircuit.net.au/~prologic/"
__copyright__ = "CopyRight (C) 2008 by %s" % __author__
__license__ = "GPL"

import csv
import optparse
import datetime
from cStringIO import StringIO

from buzhug import Base

USAGE = "%prog [options] <file> <path>"
VERSION = "%prog v" + __version__

def parse_options():
	"""parse_options() -> opts, args

	Parse any command-line options given returning both
	the parsed options and arguments.
	"""

	parser = optparse.OptionParser(usage=USAGE, version=VERSION)

	parser.add_option("", "--date-format",
			action="store",type="str", default="%d/%m/%Y",
			dest="dateFormat",
			help="date format string")
	parser.add_option("", "--time-format",
			action="store", type="str", default="%H:%M:%S",
			dest="timeFormat",
			help="time format string")
	parser.add_option("", "--datetime-format",
			action="store", type="str", default="%H:%M:%S %d/%m/%Y",
			dest="datetimeFormat",
			help="datetime format string")

	opts, args = parser.parse_args()

	if len(args) < 2:
		parser.print_help()
		raise SystemExit, 1

	return opts, args

def readCSV(file):

	if type(file) == str:
		fd = open(file, "rU")
	else:
		fd = file

	sniffer = csv.Sniffer()
	dialect = sniffer.sniff(fd.readline())
	fd.seek(0)

	reader = csv.reader(fd, dialect)
	for line in reader:
		yield line

def main():
	opts, args = parse_options()

	file = args[0]
	path = args[1]

	if file == "-":
		fd = sys.stdin
	else:
		fd = open(file, "rU")

	db = Base(path)
	db.open()

	db.set_string_format(datetime.date, opts.dateFormat)
	db.set_string_format(datetime.time, opts.timeFormat)
	db.set_string_format(datetime.datetime, opts.datetimeFormat)

	for data in readCSV(fd):
		db.insert_as_strings(*data)

	db.commit()
	db.close()

if __name__ == "__main__":
	main()
